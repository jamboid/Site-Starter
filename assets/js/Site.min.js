var Site = Site || {};

// Site namespace
//
// Base namespace for the Site framework
Site.init = (function ($) {
    "use strict";

    var modules = {};
    // Initialisation
    modules.init = function () {
      $(document).ready(function () {
        Site.utils.init();
        Site.layout.init();
        Site.events.init();
        Site.showhide.init();
        Site.forms.init();
        Site.images.init();
        Site.carousel.init();
        Site.analytics.init();
      });
    };

    // Automatically call init function
    return modules.init();

}(jQuery));

/* **********************************************
     Begin imagesloaded.pkgd.js
********************************************** */

/*!
 * imagesLoaded PACKAGED v3.0.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */


/*!
 * EventEmitter v4.2.4 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */

(function () {


  /**
   * Class for managing events.
   * Can be extended to provide event functionality in other classes.
   *
   * @class EventEmitter Manages event registering and emitting.
   */
  function EventEmitter() {}

  // Shortcuts to improve speed and size

  // Easy access to the prototype
  var proto = EventEmitter.prototype;

  /**
   * Finds the index of the listener for the event in it's storage array.
   *
   * @param {Function[]} listeners Array of listeners to search through.
   * @param {Function} listener Method to look for.
   * @return {Number} Index of the specified listener, -1 if not found
   * @api private
   */
  function indexOfListener(listeners, listener) {
    var i = listeners.length;
    while (i--) {
      if (listeners[i].listener === listener) {
        return i;
      }
    }

    return -1;
  }

  /**
   * Alias a method while keeping the context correct, to allow for overwriting of target method.
   *
   * @param {String} name The name of the target method.
   * @return {Function} The aliased method
   * @api private
   */
  function alias(name) {
    return function aliasClosure() {
      return this[name].apply(this, arguments);
    };
  }

  /**
   * Returns the listener array for the specified event.
   * Will initialise the event object and listener arrays if required.
   * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
   * Each property in the object response is an array of listener functions.
   *
   * @param {String|RegExp} evt Name of the event to return the listeners from.
   * @return {Function[]|Object} All listener functions for the event.
   */
  proto.getListeners = function getListeners(evt) {
    var events = this._getEvents();
    var response;
    var key;

    // Return a concatenated array of all matching events if
    // the selector is a regular expression.
    if (typeof evt === 'object') {
      response = {};
      for (key in events) {
        if (events.hasOwnProperty(key) && evt.test(key)) {
          response[key] = events[key];
        }
      }
    }
    else {
      response = events[evt] || (events[evt] = []);
    }

    return response;
  };

  /**
   * Takes a list of listener objects and flattens it into a list of listener functions.
   *
   * @param {Object[]} listeners Raw listener objects.
   * @return {Function[]} Just the listener functions.
   */
  proto.flattenListeners = function flattenListeners(listeners) {
    var flatListeners = [];
    var i;

    for (i = 0; i < listeners.length; i += 1) {
      flatListeners.push(listeners[i].listener);
    }

    return flatListeners;
  };

  /**
   * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
   *
   * @param {String|RegExp} evt Name of the event to return the listeners from.
   * @return {Object} All listener functions for an event in an object.
   */
  proto.getListenersAsObject = function getListenersAsObject(evt) {
    var listeners = this.getListeners(evt);
    var response;

    if (listeners instanceof Array) {
      response = {};
      response[evt] = listeners;
    }

    return response || listeners;
  };

  /**
   * Adds a listener function to the specified event.
   * The listener will not be added if it is a duplicate.
   * If the listener returns true then it will be removed after it is called.
   * If you pass a regular expression as the event name then the listener will be added to all events that match it.
   *
   * @param {String|RegExp} evt Name of the event to attach the listener to.
   * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.addListener = function addListener(evt, listener) {
    var listeners = this.getListenersAsObject(evt);
    var listenerIsWrapped = typeof listener === 'object';
    var key;

    for (key in listeners) {
      if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
        listeners[key].push(listenerIsWrapped ? listener : {
          listener: listener,
          once: false
        });
      }
    }

    return this;
  };

  /**
   * Alias of addListener
   */
  proto.on = alias('addListener');

  /**
   * Semi-alias of addListener. It will add a listener that will be
   * automatically removed after it's first execution.
   *
   * @param {String|RegExp} evt Name of the event to attach the listener to.
   * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.addOnceListener = function addOnceListener(evt, listener) {
    return this.addListener(evt, {
      listener: listener,
      once: true
    });
  };

  /**
   * Alias of addOnceListener.
   */
  proto.once = alias('addOnceListener');

  /**
   * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
   * You need to tell it what event names should be matched by a regex.
   *
   * @param {String} evt Name of the event to create.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.defineEvent = function defineEvent(evt) {
    this.getListeners(evt);
    return this;
  };

  /**
   * Uses defineEvent to define multiple events.
   *
   * @param {String[]} evts An array of event names to define.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.defineEvents = function defineEvents(evts) {
    for (var i = 0; i < evts.length; i += 1) {
      this.defineEvent(evts[i]);
    }
    return this;
  };

  /**
   * Removes a listener function from the specified event.
   * When passed a regular expression as the event name, it will remove the listener from all events that match it.
   *
   * @param {String|RegExp} evt Name of the event to remove the listener from.
   * @param {Function} listener Method to remove from the event.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.removeListener = function removeListener(evt, listener) {
    var listeners = this.getListenersAsObject(evt);
    var index;
    var key;

    for (key in listeners) {
      if (listeners.hasOwnProperty(key)) {
        index = indexOfListener(listeners[key], listener);

        if (index !== -1) {
          listeners[key].splice(index, 1);
        }
      }
    }

    return this;
  };

  /**
   * Alias of removeListener
   */
  proto.off = alias('removeListener');

  /**
   * Adds listeners in bulk using the manipulateListeners method.
   * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
   * You can also pass it a regular expression to add the array of listeners to all events that match it.
   * Yeah, this function does quite a bit. That's probably a bad thing.
   *
   * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
   * @param {Function[]} [listeners] An optional array of listener functions to add.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.addListeners = function addListeners(evt, listeners) {
    // Pass through to manipulateListeners
    return this.manipulateListeners(false, evt, listeners);
  };

  /**
   * Removes listeners in bulk using the manipulateListeners method.
   * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
   * You can also pass it an event name and an array of listeners to be removed.
   * You can also pass it a regular expression to remove the listeners from all events that match it.
   *
   * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
   * @param {Function[]} [listeners] An optional array of listener functions to remove.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.removeListeners = function removeListeners(evt, listeners) {
    // Pass through to manipulateListeners
    return this.manipulateListeners(true, evt, listeners);
  };

  /**
   * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
   * The first argument will determine if the listeners are removed (true) or added (false).
   * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
   * You can also pass it an event name and an array of listeners to be added/removed.
   * You can also pass it a regular expression to manipulate the listeners of all events that match it.
   *
   * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
   * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
   * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
    var i;
    var value;
    var single = remove ? this.removeListener : this.addListener;
    var multiple = remove ? this.removeListeners : this.addListeners;

    // If evt is an object then pass each of it's properties to this method
    if (typeof evt === 'object' && !(evt instanceof RegExp)) {
      for (i in evt) {
        if (evt.hasOwnProperty(i) && (value = evt[i])) {
          // Pass the single listener straight through to the singular method
          if (typeof value === 'function') {
            single.call(this, i, value);
          }
          else {
            // Otherwise pass back to the multiple function
            multiple.call(this, i, value);
          }
        }
      }
    }
    else {
      // So evt must be a string
      // And listeners must be an array of listeners
      // Loop over it and pass each one to the multiple method
      i = listeners.length;
      while (i--) {
        single.call(this, evt, listeners[i]);
      }
    }

    return this;
  };

  /**
   * Removes all listeners from a specified event.
   * If you do not specify an event then all listeners will be removed.
   * That means every event will be emptied.
   * You can also pass a regex to remove all events that match it.
   *
   * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.removeEvent = function removeEvent(evt) {
    var type = typeof evt;
    var events = this._getEvents();
    var key;

    // Remove different things depending on the state of evt
    if (type === 'string') {
      // Remove all listeners for the specified event
      delete events[evt];
    }
    else if (type === 'object') {
      // Remove all events matching the regex.
      for (key in events) {
        if (events.hasOwnProperty(key) && evt.test(key)) {
          delete events[key];
        }
      }
    }
    else {
      // Remove all listeners in all events
      delete this._events;
    }

    return this;
  };

  /**
   * Alias of removeEvent.
   *
   * Added to mirror the node API.
   */
  proto.removeAllListeners = alias('removeEvent');

  /**
   * Emits an event of your choice.
   * When emitted, every listener attached to that event will be executed.
   * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
   * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
   * So they will not arrive within the array on the other side, they will be separate.
   * You can also pass a regular expression to emit to all events that match it.
   *
   * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
   * @param {Array} [args] Optional array of arguments to be passed to each listener.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.emitEvent = function emitEvent(evt, args) {
    var listeners = this.getListenersAsObject(evt);
    var listener;
    var i;
    var key;
    var response;

    for (key in listeners) {
      if (listeners.hasOwnProperty(key)) {
        i = listeners[key].length;

        while (i--) {
          // If the listener returns true then it shall be removed from the event
          // The function is executed either with a basic call or an apply if there is an args array
          listener = listeners[key][i];

          if (listener.once === true) {
            this.removeListener(evt, listener.listener);
          }

          response = listener.listener.apply(this, args || []);

          if (response === this._getOnceReturnValue()) {
            this.removeListener(evt, listener.listener);
          }
        }
      }
    }

    return this;
  };

  /**
   * Alias of emitEvent
   */
  proto.trigger = alias('emitEvent');

  /**
   * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
   * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
   *
   * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
   * @param {...*} Optional additional arguments to be passed to each listener.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.emit = function emit(evt) {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.emitEvent(evt, args);
  };

  /**
   * Sets the current value to check against when executing listeners. If a
   * listeners return value matches the one set here then it will be removed
   * after execution. This value defaults to true.
   *
   * @param {*} value The new value to check for when executing listeners.
   * @return {Object} Current instance of EventEmitter for chaining.
   */
  proto.setOnceReturnValue = function setOnceReturnValue(value) {
    this._onceReturnValue = value;
    return this;
  };

  /**
   * Fetches the current value to check against when executing listeners. If
   * the listeners return value matches this one then it should be removed
   * automatically. It will return true by default.
   *
   * @return {*|Boolean} The current value to check for or the default, true.
   * @api private
   */
  proto._getOnceReturnValue = function _getOnceReturnValue() {
    if (this.hasOwnProperty('_onceReturnValue')) {
      return this._onceReturnValue;
    }
    else {
      return true;
    }
  };

  /**
   * Fetches the events object and creates one if required.
   *
   * @return {Object} The events storage object.
   * @api private
   */
  proto._getEvents = function _getEvents() {
    return this._events || (this._events = {});
  };

  // Expose the class either via AMD, CommonJS or the global object
  if (typeof define === 'function' && define.amd) {
    define('eventEmitter/EventEmitter',[],function () {
      return EventEmitter;
    });
  }
  else if (typeof module === 'object' && module.exports){
    module.exports = EventEmitter;
  }
  else {
    this.EventEmitter = EventEmitter;
  }
}.call(this));

/*!
 * eventie v1.0.3
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false */

( function( window ) {



var docElem = document.documentElement;

var bind = function() {};

if ( docElem.addEventListener ) {
  bind = function( obj, type, fn ) {
    obj.addEventListener( type, fn, false );
  };
} else if ( docElem.attachEvent ) {
  bind = function( obj, type, fn ) {
    obj[ type + fn ] = fn.handleEvent ?
      function() {
        var event = window.event;
        // add event.target
        event.target = event.target || event.srcElement;
        fn.handleEvent.call( fn, event );
      } :
      function() {
        var event = window.event;
        // add event.target
        event.target = event.target || event.srcElement;
        fn.call( obj, event );
      };
    obj.attachEvent( "on" + type, obj[ type + fn ] );
  };
}

var unbind = function() {};

if ( docElem.removeEventListener ) {
  unbind = function( obj, type, fn ) {
    obj.removeEventListener( type, fn, false );
  };
} else if ( docElem.detachEvent ) {
  unbind = function( obj, type, fn ) {
    obj.detachEvent( "on" + type, obj[ type + fn ] );
    try {
      delete obj[ type + fn ];
    } catch ( err ) {
      // can't delete window object properties
      obj[ type + fn ] = undefined;
    }
  };
}

var eventie = {
  bind: bind,
  unbind: unbind
};

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( 'eventie/eventie',eventie );
} else {
  // browser global
  window.eventie = eventie;
}

})( this );

/*!
 * imagesLoaded v3.0.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

( function( window ) {



var $ = window.jQuery;
var console = window.console;
var hasConsole = typeof console !== 'undefined';

// -------------------------- helpers -------------------------- //

// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}

var objToString = Object.prototype.toString;
function isArray( obj ) {
  return objToString.call( obj ) === '[object Array]';
}

// turn element or nodeList into an array
function makeArray( obj ) {
  var ary = [];
  if ( isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( typeof obj.length === 'number' ) {
    // convert nodeList to array
    for ( var i=0, len = obj.length; i < len; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
}

// --------------------------  -------------------------- //

function defineImagesLoaded( EventEmitter, eventie ) {

  /**
   * @param {Array, Element, NodeList, String} elem
   * @param {Object or Function} options - if function, use as callback
   * @param {Function} onAlways - callback function
   */
  function ImagesLoaded( elem, options, onAlways ) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if ( !( this instanceof ImagesLoaded ) ) {
      return new ImagesLoaded( elem, options );
    }
    // use elem as selector string
    if ( typeof elem === 'string' ) {
      elem = document.querySelectorAll( elem );
    }

    this.elements = makeArray( elem );
    this.options = extend( {}, this.options );

    if ( typeof options === 'function' ) {
      onAlways = options;
    } else {
      extend( this.options, options );
    }

    if ( onAlways ) {
      this.on( 'always', onAlways );
    }

    this.getImages();

    if ( $ ) {
      // add jQuery Deferred object
      this.jqDeferred = new $.Deferred();
    }

    // HACK check async to allow time to bind listeners
    var _this = this;
    setTimeout( function() {
      _this.check();
    });
  }

  ImagesLoaded.prototype = new EventEmitter();

  ImagesLoaded.prototype.options = {};

  ImagesLoaded.prototype.getImages = function() {
    this.images = [];

    // filter & find items if we have an item selector
    for ( var i=0, len = this.elements.length; i < len; i++ ) {
      var elem = this.elements[i];
      // filter siblings
      if ( elem.nodeName === 'IMG' ) {
        this.addImage( elem );
      }
      // find children
      var childElems = elem.querySelectorAll('img');
      // concat childElems to filterFound array
      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
        var img = childElems[j];
        this.addImage( img );
      }
    }
  };

  /**
   * @param {Image} img
   */
  ImagesLoaded.prototype.addImage = function( img ) {
    var loadingImage = new LoadingImage( img );
    this.images.push( loadingImage );
  };

  ImagesLoaded.prototype.check = function() {
    var _this = this;
    var checkedCount = 0;
    var length = this.images.length;
    this.hasAnyBroken = false;
    // complete if no images
    if ( !length ) {
      this.complete();
      return;
    }

    function onConfirm( image, message ) {
      if ( _this.options.debug && hasConsole ) {
        console.log( 'confirm', image, message );
      }

      _this.progress( image );
      checkedCount++;
      if ( checkedCount === length ) {
        _this.complete();
      }
      return true; // bind once
    }

    for ( var i=0; i < length; i++ ) {
      var loadingImage = this.images[i];
      loadingImage.on( 'confirm', onConfirm );
      loadingImage.check();
    }
  };

  ImagesLoaded.prototype.progress = function( image ) {
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    // HACK - Chrome triggers event before object properties have changed. #83
    var _this = this;
    setTimeout( function() {
      _this.emit( 'progress', _this, image );
      if ( _this.jqDeferred ) {
        _this.jqDeferred.notify( _this, image );
      }
    });
  };

  ImagesLoaded.prototype.complete = function() {
    var eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    var _this = this;
    // HACK - another setTimeout so that confirm happens after progress
    setTimeout( function() {
      _this.emit( eventName, _this );
      _this.emit( 'always', _this );
      if ( _this.jqDeferred ) {
        var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';
        _this.jqDeferred[ jqMethod ]( _this );
      }
    });
  };

  // -------------------------- jquery -------------------------- //

  if ( $ ) {
    $.fn.imagesLoaded = function( options, callback ) {
      var instance = new ImagesLoaded( this, options, callback );
      return instance.jqDeferred.promise( $(this) );
    };
  }


  // --------------------------  -------------------------- //

  var cache = {};

  function LoadingImage( img ) {
    this.img = img;
  }

  LoadingImage.prototype = new EventEmitter();

  LoadingImage.prototype.check = function() {
    // first check cached any previous images that have same src
    var cached = cache[ this.img.src ];
    if ( cached ) {
      this.useCached( cached );
      return;
    }
    // add this to cache
    cache[ this.img.src ] = this;

    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    if ( this.img.complete && this.img.naturalWidth !== undefined ) {
      // report based on naturalWidth
      this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
      return;
    }

    // If none of the checks above matched, simulate loading on detached element.
    var proxyImage = this.proxyImage = new Image();
    eventie.bind( proxyImage, 'load', this );
    eventie.bind( proxyImage, 'error', this );
    proxyImage.src = this.img.src;
  };

  LoadingImage.prototype.useCached = function( cached ) {
    if ( cached.isConfirmed ) {
      this.confirm( cached.isLoaded, 'cached was confirmed' );
    } else {
      var _this = this;
      cached.on( 'confirm', function( image ) {
        _this.confirm( image.isLoaded, 'cache emitted confirmed' );
        return true; // bind once
      });
    }
  };

  LoadingImage.prototype.confirm = function( isLoaded, message ) {
    this.isConfirmed = true;
    this.isLoaded = isLoaded;
    this.emit( 'confirm', this, message );
  };

  // trigger specified handler for event type
  LoadingImage.prototype.handleEvent = function( event ) {
    var method = 'on' + event.type;
    if ( this[ method ] ) {
      this[ method ]( event );
    }
  };

  LoadingImage.prototype.onload = function() {
    this.confirm( true, 'onload' );
    this.unbindProxyEvents();
  };

  LoadingImage.prototype.onerror = function() {
    this.confirm( false, 'onerror' );
    this.unbindProxyEvents();
  };

  LoadingImage.prototype.unbindProxyEvents = function() {
    eventie.unbind( this.proxyImage, 'load', this );
    eventie.unbind( this.proxyImage, 'error', this );
  };

  // -----  ----- //

  return ImagesLoaded;
}

// -------------------------- transport -------------------------- //

if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( [
      'eventEmitter/EventEmitter',
      'eventie/eventie'
    ],
    defineImagesLoaded );
} else {
  // browser global
  window.imagesLoaded = defineImagesLoaded(
    window.EventEmitter,
    window.eventie
  );
}

})( window );

/* **********************************************
     Begin jquery.debouncedresize.js
********************************************** */

/*
 * debouncedresize: special jQuery event that happens once after a window resize
 *
 * latest version and complete README available on Github:
 * https://github.com/louisremi/jquery-smartresize
 *
 * Copyright 2012 @louis_remi
 * Licensed under the MIT license.
 *
 * This saved you an hour of work? 
 * Send me music http://www.amazon.co.uk/wishlist/HNTU0468LQON
 */
(function($) {

var $event = $.event,
	$special,
	resizeTimeout;

$special = $event.special.debouncedresize = {
	setup: function() {
		$( this ).on( "resize", $special.handler );
	},
	teardown: function() {
		$( this ).off( "resize", $special.handler );
	},
	handler: function( event, execAsap ) {
		// Save the context
		var context = this,
			args = arguments,
			dispatch = function() {
				// set correct event type
				event.type = "debouncedresize";
				$event.dispatch.apply( context, args );
			};

		if ( resizeTimeout ) {
			clearTimeout( resizeTimeout );
		}

		execAsap ?
			dispatch() :
			resizeTimeout = setTimeout( dispatch, $special.threshold );
	},
	threshold: 150
};

})(jQuery);

/* **********************************************
     Begin jquery.pubsub.js
********************************************** */

/*!
 * JZ Publish/Subscribe
 * Version: 1.4
 * License: http://www.opensource.org/licenses/gpl-3.0.html
 * Docs: http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/
 * Repo: https://github.com/joezimjs/JZ-Publish-Subscribe-jQuery-Plugin
 */

;(function ($) {
	'use strict';

	var subscriptions = {},
		ctx = {},
		publishing = false,

		clone = function(arr) {
			return arr.slice(0);
		};

	/**
     * jQuery.subscribe( topics, callback[, context] )
     * - topics (String): 1 or more topic names, separated by a space, to subscribe to
     * - callback (Function): function to be called when the given topic(s) is published to
     * - context (Object): an object to call the function on
     * returns: { "topics": topics, "callback": callback } or null if invalid arguments
     */
	$.subscribe = function (topics, callback, context) {
		var topicArr,
			usedTopics = {};

		// If no context was set, assign an empty object to the context
		context = context || ctx;

		// Make sure that each argument is valid
		if ($.type(topics) !== "string" || !$.isFunction(callback)) {
			// If anything is invalid, return null
			return null;
		}

		// Split space-separated topics into an array of topics
		topicArr = topics.split(" ");

		// Iterate over each topic and individually subscribe the callback function to them
		$.each(topicArr, function (i, topic) {
			// If the topic is an empty string, skip it. This may happen if there is more than one space between topics
			// Also skip if this is a repeat topic (e.g. someone entered "topic1 topic1"). Otherwise mark it as used.
			if (topic === "" || usedTopics[topic]) {
				return true; // continue
			} else {
				// Mark the topic as used
				usedTopics[topic] = true;
			}

			// If the topic does not exist, create it
			if (!subscriptions[topic]) {
				subscriptions[topic] = [];
			}

			// Add the callback function to the end of the array of callbacks assigned to the specified topic
			subscriptions[topic].push([callback,context]);
		});

		// Return a handle that can be used to unsubscribe
		return { topics: topics, callback: callback, context:context };
	};

	/**
     * jQuery.unsubscribe( topics[, callback[, context]] )
     * - topics (String): 1 or more topic names, separated by a space, to unsubscribe from
     * - callback (Function): function to be removed from the topic's subscription list. If none is supplied, all functions are removed from given topic(s)
     * - context (Object): object that was used as the context in the jQuery.subscribe() call.
     */
	$.unsubscribe = function (topics, callback, context) {
		var topicArr,
			usedTopics = {};

		// topics must either be a string, or have a property named topics that is a string
		if (!topics || ($.type(topics) !== "string" && (!topics.topics || $.type(topics.topics) !== "string"))) {
			// If it isn't valid, return null
			return $;
		}

		// If the handler was used, then split the handle object into the two arguments
		if (topics.topics) {
			callback = callback || topics.callback;
			context = context || topics.context;
			topics = topics.topics;
		}

		// If no context was provided, then use the default context
		context = context || ctx;

		// Split space-separated topics into an array of topics
		topicArr = topics.split(" ");

		// Iterate over each topic and individually unsubscribe the callback function from them
		$.each(topicArr, function (i, topic) {
			var currTopic = subscriptions[topic];

			// If the topic is an empty string or doesn't exist in subscriptions, or is a repeat topic, skip it.
			// Otherwise mark the topic as used
			if (topic === "" || !currTopic || usedTopics[topic]) {
				return true; // continue
			} else {
				usedTopics[topic] = true;
			}

			// If no callback is given, then remove all subscriptions to this topic
			if (!callback || !$.isFunction(callback)) {
				delete subscriptions[topic];
			} else {
				// Otherwise a callback is specified; iterate through this topic to find the correct callback
				$.each(currTopic, function (i, subscription) {
					if (subscription[0] === callback && subscription[1] === context) {
						currTopic.splice(i, 1);
						return false; // break
					}
				});
			}
		});

		return $;
	};

	/**
     * jQuery.publish( topics[, data] )
     * - topics (String): the subscription topic(s) to publish to
     * - data: any data (in any format) you wish to give to the subscribers
     */
	$.publish = function (topics, data) {
		// Return null if topics isn't a string
		if (!topics || $.type(topics) !== "string") {
			return $;
		}

		// Split the topics up into an array of topics
		var topicArr = topics.split(" ");

		// Iterate over the topics and publish to each one
		$.each(topicArr, function (i, topic) {
			// If the topic is blank, skip to the next one
			if (topic === "") {
				return true; // continue
			}

			if (subscriptions[topic]) {
				// Clone the subscriptions we're publishing to so that we don't run into any errors if someone (un)subscribes during the publishing.
				var subs = clone(subscriptions[topic]);

				// Iterate over each subscriber and call the callback function
				$.each(subs, function (i, subscription) {
					subscription[0].call(subscription[1], topic, data);
				});
			}
		});

		return $;
	};

}(jQuery));

/* **********************************************
     Begin tappy.js
********************************************** */

/*! Tappy! - a lightweight normalized tap event. Copyright 2013 @scottjehl, Filament Group, Inc. Licensed MIT */
(function( w, $, undefined ){

	var tap = function( $els ){
		return $els.each(function(){

			var $el = $( this ),
				lastE,
				resetTimer,
				lastScroll,
				scrollTolerance = 15,
				href;

			function trigger( e ){
				e.preventDefault();
				$( e.target ).trigger( "tap", [ e ] );
			}

			function start(){
				lastScroll = w.document.body.scrollTop;
				if( $el.is( "a" ) ){
					// set href to null hash during tap. this prevents the address bar from dropping down in iOS
					href = $el[ 0 ].href;
					$el[ 0 ].href = "#";
				}
			}

			function end( e ){

				e.preventDefault();

				// this part prevents a double callback from touch and mouse on the same tap
				if( lastE && lastE !== e.type ){
					return false;
				}

				lastE = e.type;
				clearTimeout( resetTimer );
				resetTimer = setTimeout( function(){
					lastE = null;
				}, 1000 );

				// if a scroll happened between touchstart and touchend
				if( e.type === "touchend" && Math.abs( w.document.body.scrollTop - lastScroll ) > scrollTolerance ){
					return false;
				}

				// set href back
				if( href ){
					$el[ 0 ].href = href;
				}
				href = null;

				trigger( e );
			}

			$el
				.bind( "touchstart", start )
				.bind( "touchend", end )
				.bind( "click", end );
		});
	};

	// monkeybind
	var oldBind = $.fn.bind;
	$.fn.bind = function( evt, callback ){
		if( /(^| )tap( |$)/.test( evt ) ){
			tap( this );
		}
		return oldBind.apply( this, [evt, callback] );
	};

}( this, jQuery ));

/* **********************************************
     Begin Site.utils.js
********************************************** */

// Site.utils.js

// Check if base namespace is defined
var Site = Site || {};

// Site.helpers namespace
Site.utils = (function ($) {
    "use strict";
    // Variables
    var debugMode = true,
        // Console.log function with check for browsers that don't support it
        logMessage = function (logMessage) {
          if (debugMode === true) {
            if (typeof window.console !== undefined) {
              window.console.log(logMessage);
            }
          }
        },

        // Get maximum height of a set of elements
        getMaxHeight = function (elements) {
          var theseElements = elements,
              maxHeight = 0,
              currentHeight = 0;
          $(theseElements).css('min-height', 0);
          $(theseElements).each(function () {
            currentHeight = $(this).height();
            if (currentHeight > maxHeight){
              maxHeight = currentHeight;
            }
          });
          return maxHeight;
        },

        // Equalise the minimum heights of a set of elements
        equaliseMinHeights = function (elements) {
          var theseElements = elements,
              maxHeight = getMaxHeight(theseElements);

          getMaxHeight(theseElements);
          $(theseElements).css('min-height', maxHeight);
        },

        // Check if placeholder attribute is supported
        placeholderIsSupported = function () {
          var test = document.createElement('input');
          return ('placeholder' in test);
        },

        // Read a page's GET URL query string variables and return them as an associative array.
        getURLQueryString = function () {
          var vars = [], hash;
          var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
          for(var i = 0; i < hashes.length; i++)
          {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
          }
          return vars;
        },

        // Check if element is currently displayed in the viewport - returns bool
        isElementInView = function (element) {
          var $element = $(element),
              $window = $(window),
              windowHeight = $window.height(),
            scrollTop = $window.scrollTop(),
              elementOffset = $element.offset(),
              top = elementOffset.top;

              if ( (scrollTop + windowHeight) > (top) && (top + $element.height()) > scrollTop ) {
                return true;
              } else {
                return false;
              }
        },

        // Remove the style attribute from an element
        resetStyles = function (element) {
          $(element).removeAttr("style");
        },

        // Add "odd" and "even" classes
        addOddAndEvenClasses = function (elements) {
          var $theseElements = $(elements);
          $theseElements.filter(':nth-child(2n-1)').addClass('odd');
          $theseElements.filter(':nth-child(2n)').addClass('even');
        },

        // Initialisation
        init = function () {
          Site.utils.cl("Site.utils.init called");
        };

    // Return Public API
    return {
      cl: logMessage,
      resetStyles: resetStyles,
      equaliseMinHeights: equaliseMinHeights,
      placeholderIsSupported: placeholderIsSupported,
      getURLQueryString: getURLQueryString,
      isElementInView: isElementInView,
      addOddAndEvenClasses: addOddAndEvenClasses,
      init: init
    };

}(jQuery));


/* **********************************************
     Begin Site.events.js
********************************************** */

// Site.events.js

// Check if base namespace is defined so it isn't overwritten
var Site = Site || {};

// Create child namespace
Site.events = (function ($) {
    "use strict";
    // Variables
    var
        // Bind delegated events
        bindDelegatedEvents = function () {
          var $body = $('body');

          // Handle 'layoutChange' event bubbled to <body> element
          $body.on('layoutchange', function () {
            Site.utils.cl('layoutchange on body');

            // Update any lazy-load images that may now be visible
            if(Site.images.updateLazyImages !== undefined) {
              Site.images.updateLazyImages();
            }
          });

          // Handle page scroll or (debounced) resize
          $(window).on('scroll debouncedresize', function () {
            // Load any lazy images that are now in view
            if(Site.images.updateLazyImages !== undefined) {
              Site.images.updateLazyImages();
            }
          });

          // Handle 'click' event on show/hide control
          $body.on('click','[data-plugin=showhide] [data-action=toggle]', function (e) {
            e.preventDefault();
            $(e.target).trigger('toggleShowHide');
          });

          // Handle click on 'click-to-load' lazy image
          $body.on('click','.lazyLoader[data-loading=click]', function (e) {
            e.preventDefault();
            $(e.target).trigger('loadLazyImage');
          });

          // Handle click on Carousel slide
          $body.on('click','[data-plugin=carousel] .slide a', function (e) {
            e.preventDefault();
            $(e.target).trigger('toggleAutoCycle');
          });

          // Handle click on Mobile Main Nav Menu toggle
          $body.on('click','.cpMainNav .navTitle a', function (e) {
            e.preventDefault();
            $(e.target).trigger('toggleMainNav');
          });

        },

        init = function () {
          Site.utils.cl("Site.events initialised");
          bindDelegatedEvents();
        };

    // Return Public API
    return {
      init: init
    };

}(jQuery));

/* **********************************************
     Begin Site.layout.js
********************************************** */

// Site.layout.js

// Check if base layout is defined so it isn't overwritten
var Site = Site || {};

// Create child layout
Site.layout = (function ($) {
  "use strict";
  // Variables
  var defaults = {},
      init = function () {
        Site.utils.cl("Site.layout initialised");
      };

  // Return Public API
  return {
    init: init,
  };
}(jQuery));

/* **********************************************
     Begin Site.forms.js
********************************************** */

// Site.namespace.js

// Check if base namespace is defined so it isn't overwritten
var Site = Site || {};

// Create child namespace
Site.forms = (function ($) {
    "use strict";
    // Variables
    var isPlaceholderSupported = Site.utils.placeholderIsSupported(),

        // Set placeholder attribute using label text
        setPlaceholders = function () {
          $('.form-item').each(function(){
            var formElem = $(this).find('input, textarea').not('input[type=submit]').eq(0),
                formLabel = $(this).find('label').eq(0),
                formLabelText = $(formLabel).text(),
                mandSpan = $(formLabelText).find('.form-required');
                formLabelText = $(formLabel).text();
                $(formElem).attr('placeholder', formLabelText);
          });

          // Now the placeholders have been set, make sure the fallback is in place for
          // browsers that don't have native support for the attribute
          if(!isPlaceholderSupported){
            setPlaceholderFallback();
          }
        },

        // Add placeholder-like behaviour for form fields in browsers that don't support it
        setPlaceholderFallback = function () {
          // Create default text for text field on page load
          createText = function (defVal, thisObj) {
            if (thisObj.attr("value") === defVal || thisObj.attr("value").length === 0) {
              thisObj.attr("value", defVal);
              thisObj.addClass("empty");
            }
          },

          // Remove default text on focus. Ignore user-inserted text
          removeText = function (defVal, thisObj) {
            var currVal = thisObj.attr("value");
            if (currVal === defVal) {
              thisObj.attr("value", "");
              thisObj.removeClass("empty");
            }
          },

          // Restore default text on focus. Ignore user-inserted text
          restoreText = function (defVal, thisObj) {
            var currVal = thisObj.attr("value");
            if (currVal !== undefined && currVal !== '') {
              thisObj.attr("value", currVal);
            }
            else if (currVal === undefined || currVal === '') {
              thisObj.attr("value", defVal);
              thisObj.addClass("empty");
            }
          };

          Site.utils.cl(isPlaceholderSupported);

          if (!isPlaceholderSupported){

            Site.utils.cl('Placeholder not supported');
            // Get inputs with a placeholder attribute set
          	$("input[placeholder], textarea[placeholder]").each(function() {
              var labelVal = $(this).attr("placeholder");
              $(this).each(function() {
                  createText(labelVal, $(this));
              });
              // Removal of text on user-focus
              $(this).focus(function() {
                  removeText(labelVal, $(this));
              });
              // Restoration of default text on input blur, if no user input.
              $(this).blur(function() {
                  restoreText(labelVal, $(this));
              });
            });
          }
        },

        init = function () {
          Site.utils.cl("Site.forms initialised");
        };

    // Return Public API
    return {
      init: init
    };

}(jQuery));

/* **********************************************
     Begin Site.showhide.js
********************************************** */

// Site.showhide.js

// Check if base namespace is defined
var Site = Site || {};

// Site.layout namespace
Site.showhide = (function ($) {
    "use strict";
    // Variables
    var defaults = {
          selPlugin : "[data-plugin=showhide]",
          selAction : "[data-action=toggle]",
          selContent : "[data-content=showhide]"
        },

        // Show/Hide "Nipper" object
        // NOTE: The term "Nipper" is Copyright Rob Graham (@restlesslake)
        Nipper = function (elem) {
          var $thisNipper = $(elem),
              $thisContent = $thisNipper.find(defaults.selContent).eq(0),
              config = $thisNipper.data('plugin-config'),
              animate = config.animate || false,
              speed = config.speed || 200,
              startState = config.open || false,

              // Toggle Show/Hide control
              toggleControl = function () {
                var
                // Function called when show/hide transition is complete
                transitionComplete = function () {
                  // Fire event to be heard by global delegate (Site.events.js)
                  $thisNipper.trigger('layoutchange');
                };


                if($thisNipper.hasClass('isClosed')){
                  if(animate === true){
                    $thisContent .slideDown(speed, function () {
                      $thisNipper.removeClass('isClosed');
                      transitionComplete();
                    });
                  } else {
                    $thisContent.show();
                    $thisNipper.removeClass('isClosed');
                    transitionComplete();
                  }

                } else {
                  if(animate === true){
                    $thisContent.slideUp(speed, function () {
                      $thisNipper.addClass('isClosed');
                      transitionComplete();
                    });
                  } else {
                    $thisContent.hide();
                    $thisNipper.addClass('isClosed');
                    transitionComplete();
                  }
                }
              },

              setInitialState = function () {
                if (startState === false){
                  $thisNipper.addClass('isClosed');
                }
              },

              bindCustomMessageEvents = function () {
                $thisNipper.on('toggleShowHide', function (e) {
                  e.preventDefault();
                  toggleControl();
                });
              };

          this.init = function () {
            bindCustomMessageEvents();
          };
        },

        setShowHideComponents = function () {
          var showHideComps = $(defaults.selPlugin);
          $(showHideComps).each(function () {

            var thisNipper = new Nipper(this);
            thisNipper.init();
          });
        },

        // Initialisation
        init = function () {
          Site.utils.cl("Site.showhide.init called");
          setShowHideComponents();
        };

    // Return Public API
    return {
      init: init
    };

}(jQuery));


/* **********************************************
     Begin Site.carousel.js
********************************************** */

// Site.carousel.js

// Check if base namespace is defined so it isn't overwritten
var Site = Site || {};

// Create child namespace
Site.carousel = (function ($) {
    "use strict";
    // Variables
    var defaults = {},
        carouselSel = "[data-plugin=carousel]",

        // Carousel class
        Carousel = function (elem) {
          var $thisCarousel = $(elem),
              $slideContainer = $thisCarousel.find('.slides').eq(0),
              $slides = $thisCarousel.find('.slide'),
              numOfSlides = $slides.length,
              config = $thisCarousel.data('config'),
              interval = config.interval || 5000,
              transition = config.transition || 1000,
              $currentSlide, $nextSlide, $firstSlide, currentHeight, cycleTimeout,
              carouselPaused = config.paused || true,

              setCycle = function () {
                if(!carouselPaused) {
                  cycleTimeout = setTimeout(advanceCarousel, interval);
                }
              },

              advanceCarousel = function () {
                // Fade in next slide to sit over current slide
                $nextSlide.fadeIn(transition, function () {
                  $currentSlide.removeClass('current');
                  $nextSlide.addClass('current').removeClass('next');
                  Site.utils.resetStyles($nextSlide);
                  $currentSlide = $nextSlide;

                  // Set next slide
                  var currentPos = $slides.index($currentSlide);
                  if((currentPos+1) < numOfSlides){
                    $nextSlide = $currentSlide.next();
                    $nextSlide.addClass('next');
                  } else {
                    $nextSlide = $firstSlide;
                    $nextSlide.addClass('next');
                  }

                  // Set the carousel to loop through the slides
                  setCycle();
                });
              },

              // Switch the auto-cycling of the carousel on and off
              toggleAutoCycle = function () {
                if(!carouselPaused) {
                  carouselPaused = true;
                  clearTimeout(cycleTimeout);
                } else {
                  carouselPaused = false;
                  setCycle ();
                }
              },

              // Bind Custom Events to allow Object messaging
              bindCustomMessageEvents = function () {
                $thisCarousel.on('toggleAutoCycle', function (e) {
                  e.preventDefault();
                  toggleAutoCycle();
                });
              },

              // Setup the carousel to an initial state
              setInitialState = function () {
                $firstSlide = $slides.eq(0);
                $currentSlide = $firstSlide;
                $nextSlide = $currentSlide.next();
                //currentHeight = $currentSlide.height();
                //$slideContainer.css('height',currentHeight);
                $currentSlide.addClass('current');
                $nextSlide.addClass('next');
                bindCustomMessageEvents();
                setCycle();
              };

              this.init = function () {
                setInitialState();
              };

        },

        buildCarousels = function () {
          $(carouselSel).each(function () {
            //buildCarousel(this);
            var thisCarousel = new Carousel(this);
            thisCarousel.init();
          });
        },

        init = function () {
          Site.utils.cl("Site.carousel initialised");
          buildCarousels();
        };


    // Return Public API
    return {
      init: init
    };

}(jQuery));

/* **********************************************
     Begin Site.images.js
********************************************** */

// Site.images.js

// Check if base namespace is defined so it isn't overwritten
var Site = Site || {};

// Create child namespace
Site.images = (function ($) {
  "use strict";
  // Variables
  var defaults = { },
      $lazyLoadImages = $('.lazyLoader'),

      // LazyImage object
      LazyImage = function (elem) {
        var $thisSprite = $(elem),

            // Display a pre-loaded lazy image, adding atrributes set on
            // the sprite container
            displaySpriteImageInContainer = function (image) {
              var $thisContainer = $thisSprite,
                  $thisImage = $(image),
                  imageAlt = $thisContainer.data('alt') || 'image',
                  imageWidth = $thisContainer.data('width') || '';

              $thisImage.attr('width', imageWidth).attr('alt', imageAlt);
              $thisContainer.prepend($thisImage).addClass('imageLoaded');
              // Need to allow browser a moment to process the addition of the image before diplaying it
              window.setTimeout(function () {$thisContainer.addClass('imageDisplayed');}, 100);
            },

            // Create and preload a new image based on a sprite src
            // then call a function once the image is loaded into memory
            getSpriteImageFile = function () {
              var thisImageUrl = $thisSprite.data('src'),
                  imageToAdd = new Image();

                  imageToAdd.src = thisImageUrl;
                  $(imageToAdd).imagesLoaded(displaySpriteImageInContainer(imageToAdd));
            },

            loadSpriteImageIfInView = function () {
              if(Site.utils.isElementInView($thisSprite)){
                getSpriteImageFile($thisSprite);
              }
            },

            // lazyImage class
            buildLazyImage = function () {
              var loadingMethod = $thisSprite.data('loading');

              if(loadingMethod === 'click') {
                // Do nothing
              }
              // If image is set to display when container is in view
              else if (loadingMethod === 'view') {
                // Load image if it is in view
                loadSpriteImageIfInView($thisSprite);
              }
              // Otherwise load the image on page load
              else {
                getSpriteImageFile($thisSprite);
              }

              bindCustomMessageEvents();
              subscribeToEvents();
            },

            // Add event handler for main navigation toggle
            bindCustomMessageEvents = function () {
              $thisSprite.on('loadLazyImage', function (e) {
                e.preventDefault();
                loadSpriteImageIfInView();
              });
            },

            subscribeToEvents = function () {

            };

        this.loadLazyImage = function () {
          loadSpriteImageIfInView();
        };

        this.init = function () {
          buildLazyImage();
        };
      },

      setLazyLoadImages = function () {
        $lazyLoadImages.each(function () {
          var thisLazyImage = new LazyImage(this);
          thisLazyImage.init();
        });
      },

      init = function () {
        Site.utils.cl("Site.images initialised");
        setLazyLoadImages();
      };

  // Return Public API
  return {
    init: init
  };

}(jQuery));

/* **********************************************
     Begin Site.analytics.js
********************************************** */

// Site.analytics.js

// Check if base namespace is defined
var Site = Site || {};

// Site.analytics namespace
Site.analytics = (function ($) {
    "use strict";
     var defaults = {},

        // Track a virtual page view
        // - handles Asynchronous and Universal Analytics
        trackPageView = function (url) {
          var thisURL = url;

          if (typeof ga !== 'undefined'){ // Using Google Universal Analytics

            ga('send','pageview',thisURL);

            /*
            Site.utils.cl("Page view tracked");
            Site.utils.cl('Tracked URL:');
            Site.utils.cl(thisURL);
            */

          } else if (typeof _gaq !== 'undefined'){ // Using Asynchronous Analytics

            _gaq.push(['trackPageview'], url);

            /*
            Site.utils.cl("Page view tracked");
            Site.utils.cl('Tracked URL:');
            Site.utils.cl(thisURL);
            */

          } else {

            /*
            Site.utils.cl('Tracked URL:');
            Site.utils.cl(thisURL);
            */

            Site.utils.cl("Google Analytics not available");
          }
        },

        // Track an in-page event
        // - handles Asynchronous and Universal Analytics
        trackPageEvent = function (category, eventType, detail) {
          var thisCategory = category,
              thisEventType = eventType,
              thisDetail = detail;

              if(typeof ga !== 'undefined'){ // Using Google Universal Analytics

                ga('send', 'event' , thisCategory, thisEventType, thisDetail);

                /*
                Site.utils.cl("Page Event tracked");
                Site.utils.cl('Event Category:');
                Site.utils.cl(thisCategory);
                Site.utils.cl('Event Type:');
                Site.utils.cl(thisEventType);
                Site.utils.cl('Event Detail:');
                Site.utils.cl(thisDetail);
                */

              } else if (typeof _gaq !== 'undefined'){ // Using Asynchronous Analytics

                _gaq.push(['_trackEvent', thisCategory, thisEventType, thisDetail]);

                /*
                Site.utils.cl("Page Event tracked");
                Site.utils.cl('Event Category:');
                Site.utils.cl(thisCategory);
                Site.utils.cl('Event Type:');
                Site.utils.cl(thisEventType);
                Site.utils.cl('Event Detail:');
                Site.utils.cl(thisDetail);
                */

              } else {

                /*
                Site.utils.cl("Page Event tracked");
                Site.utils.cl('Event Category:');
                Site.utils.cl(thisCategory);
                Site.utils.cl('Event Type:');
                Site.utils.cl(thisEventType);
                Site.utils.cl('Event Detail:');
                Site.utils.cl(thisDetail);
                */

                Site.utils.cl("Google Analytics not available");
              }
        },

        // Track PDF views, passing the path to the PDF as the URL
        trackPDFLinks = function () {
          $("a[href$='pdf']").on('click', function () {
            Site.utils.cl('PDF link tracked');
            var thisURL = $(this).attr('href');
            trackPageView(thisURL);
          });
        },


        // Set Custom variable for Responsive Design layout
        trackPageLayout = function () {

          var screenWidth = $(window).width(),
              layoutCategory;

          //Site.utils.cl(screenWidth);

          // Custom set of conditions to set variable value
          if (screenWidth > 768 ) {
            layoutCategory = "Desktop";
          } else if (screenWidth > 520) {
            layoutCategory = "Tablet";
          } else {
            layoutCategory = "Phone";
          }

          //Site.utils.cl(layoutCategory);

          if (ga !== 'undefined') {
            // This needs to be configured to match the Custom Dimension setup
            // in your Universal Analytics account
            ga('set', 'dimension1', layoutCategory);
            //Site.utils.cl("Layout custom dimension set for this page view (Universal Analytics)");

          } else if (typeof _gaq !== 'undefined') {
            _gaq.push(['_setCustomVar', 1 , 'Layout', layoutCategory, 3]);
            //Site.utils.cl("Layout custom variable set for this page view (Trad Analytics)");
          } else {
            //Site.utils.cl('Google Analytics not available');
          }

          //Site.utils.cl("Breakpoint custom variable set for this page view");
        },

        // Call custom functions before standard Page View call is made
        // - e.g. Set Custom variables to pass to server with page view call
        // This function should be called before the default 'trackPageView' function
        // call in the on-page Google Analytics script
        trackPageLoadInformation = function () {
          // Call custom functions
          trackPageLayout();
        },

        // Initialisation
        init = function () {
            Site.utils.cl("Site.analytics.init called");
            trackPDFLinks();
        };

    // Return Public API
    return {
      init: init,
      trackPageView: trackPageView,
      trackPageEvent: trackPageEvent,
      trackPageLoadInformation: trackPageLoadInformation
    };
}(jQuery));
